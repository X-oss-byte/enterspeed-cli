variables:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  vmPool: 'windows-latest'
  majorVersion: 1
  minorVersion: 0
  patchVersion: 0
  version: $[format('{0}.{1}.{2}', variables.majorVersion, variables.minorVersion, variables.patchVersion)]
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
    # Versioning: 1.0.0
    releaseOnNuget: true
    semVersion: $[format('{0}', variables.version)]
    buildName: $[format('{0}', variables.semVersion)]

name: $(BuildID) - $(buildName)

trigger:
  branches:
    include:
      - master
  paths:
    exclude:
      - README.md
      - CHANGELOG.md
      - docs/*

      
stages:
  - stage: Build
    displayName: Build
    jobs:
      - job: BuildPlatform
        displayName: Build Platform
        pool:
          vmImage: $(vmPool)

        steps:
          - task: DotNetCoreCLI@2
            displayName: Dotnet build
            inputs:
              command: build
              projects: 'Enterspeed.Cli.sln'
              arguments: '--configuration Release /p:Version=$(semVersion)'

          - task: DotNetCoreCLI@2
            displayName: Dotnet test
            inputs:
              command: test
              arguments: '--no-build --configuration Release'

          - task: DotNetCoreCLI@2
            displayName: Dotnet publish win-x64
            inputs:
              command: 'publish'
              publishWebProjects: false
              projects: 'src/Enterspeed.Cli/Enterspeed.Cli.csproj'
              arguments: '-c Release -r win-x64 -p:PublishReadyToRun=true --self-contained -o $(Build.ArtifactStagingDirectory)/Output/win-x64'
              zipAfterPublish: false
              modifyOutputPath: false

          - task: PublishPipelineArtifact@1
            displayName: Publish artifact - win-x64
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/Output/win-x64"
              artifact: 'es-cli_$(semVersion)_win-x64.zip'

          # - task: DotNetCoreCLI@2
          #   displayName: Dotnet publish linux-x64
          #   inputs:
          #     command: 'publish'
          #     publishWebProjects: false
          #     projects: 'src/Enterspeed.Cli/Enterspeed.Cli.csproj'
          #     arguments: '-c Release -r linux-x64 -p:PublishReadyToRun=true --self-contained -o $(Pipeline.Workspace)/Output/linux-x64'

          # - task: PublishPipelineArtifact@1
          #   displayName: Publish artifact - linux-x64
          #   inputs:
          #     targetPath: "$(Pipeline.Workspace)/Output/linux-x64"
          #     artifact: 'es-cli_$(semVersion)-linux-x64.gz'

          # - task: DotNetCoreCLI@2
          #   displayName: Dotnet publish osx-x64
          #   inputs:
          #     command: 'publish'
          #     publishWebProjects: false
          #     projects: 'src/Enterspeed.Cli/Enterspeed.Cli.csproj'
          #     arguments: '-c Release -r osx-x64 -p:PublishReadyToRun=true --self-contained -o $(Pipeline.Workspace)/Output/osx-x64'

          # - task: PublishPipelineArtifact@1
          #   displayName: Publish artifact - osx-x64
          #   inputs:
          #     targetPath: "$(Pipeline.Workspace)/Output/osx-x64"
          #     artifact: 'es-cli_$(semVersion)osx-x64.gz'

          # - task: DotNetCoreCLI@2
          #   displayName: Dotnet publish osx-arm64
          #   inputs:
          #     command: 'publish'
          #     publishWebProjects: false
          #     projects: 'src/Enterspeed.Cli/Enterspeed.Cli.csproj'
          #     arguments: '-c Release -r osx-arm64 -p:PublishReadyToRun=true --self-contained -o $(Pipeline.Workspace)/Output/osx-arm64'

          # - task: PublishPipelineArtifact@1
          #   displayName: Publish artifact - osx-arm64
          #   inputs:
          #     targetPath: "$(Pipeline.Workspace)/Output/osx-arm64"
          #     artifact: 'es-cli_$(semVersion)osx-arm64.gz'

          - task: DotNetCoreCLI@2
            displayName: 'dotnet publish'
            inputs:
              command: 'publish'
              publishWebProjects: false
              projects: '**/*.csproj'
              arguments: '-o $(Build.ArtifactStagingDirectory)/Output'
              modifyOutputPath: true

  - stage: ReleaseOnGithub
    displayName: Release on Github
    jobs:
      - job:
        displayName: Create release on Github
        pool:
          vmImage: $(vmPool)
        
        steps:
          - task: PowerShell@2
            displayName: List file - $(Pipeline.Workspace)
            inputs:
              targetType: 'inline'
              script: 'Get-ChildItem -Path $(Pipeline.Workspace) –Recurse'

          - task: PowerShell@2
            displayName: List file - $(Build.ArtifactStagingDirectory)
            inputs:
              targetType: 'inline'
              script: 'Get-ChildItem -Path $(Build.ArtifactStagingDirectory) –Recurse'

          - task: GitHubRelease@1
            inputs:
              gitHubConnection: GithubReleaseCli 
              repositoryName: '$(Build.Repository.Name)'
              action: 'create'
              target: '$(Build.SourceVersion)'
              tagSource: 'userSpecifiedTag'
              #tagPattern: # string. Optional. Use when tagSource = gitTag. Tag Pattern. 
              tag: '$(semVersion)' 
              #title: # string. Optional. Use when action = create || action = edit. Release title. 
              #releaseNotesSource: 'filePath' # 'filePath' | 'inline'. Optional. Use when action = create || action = edit. Release notes source. Default: filePath.
              #releaseNotesFilePath: # string. Optional. Use when releaseNotesSource = filePath. Release notes file path. 
              #releaseNotesInline: # string. Optional. Use when releaseNotesSource = inline. Release notes. 
              assets: |
                $(Pipeline.Workspace)/*
                $(Pipeline.Workspace)/Output/win-x64/*
                $(Pipeline.Workspace)/Output/win-x64/
                $(Pipeline.Workspace)/Output/win-x64
                $(Pipeline.Workspace)\*
                $(Pipeline.Workspace)\Output\win-x64\*
                $(Pipeline.Workspace)\Output\win-x64\
                $(Pipeline.Workspace)\Output\win-x64
                $(Pipeline.Workspace)/Output/linux-x64/*
                $(Pipeline.Workspace)/Output/osx-x64/*
                $(Pipeline.Workspace)/Output/osx-arm64/*
              #assetUploadMode: 'delete' # 'delete' | 'replace'. Optional. Use when action = edit. Asset upload mode. Default: delete.
              #isDraft: false # boolean. Optional. Use when action = create || action = edit. Draft release. Default: false.
              #isPreRelease: false # boolean. Optional. Use when action = create || action = edit. Pre-release. Default: false.
              #addChangeLog: true # boolean. Optional. Use when action = create || action = edit. Add changelog. Default: true.
              # Changelog configuration
              changeLogCompareToRelease: 'lastFullRelease' # 'lastFullRelease' | 'lastNonDraftRelease' | 'lastNonDraftReleaseByTag'. Required when addChangeLog = true. Compare to. Default: lastFullRelease.
              #changeLogCompareToReleaseTag: # string. Required when changeLogCompareToRelease = lastNonDraftReleaseByTag. Release Tag. 
              changeLogType: 'commitBased' # 'commitBased' | 'issueBased'. Required when addChangeLog = true. Changelog type. Default: commitBased.
              #changeLogLabels: '[{ "label" : "bug", "displayName" : "Bugs", "state" : "closed" }]' # string. Optional. Use when changeLogType = issueBased. Categories. Default: [{ "label" : "bug", "displayName" : "Bugs", "state" : "closed" }].
